"use strict";(self.webpackChunkengineering_com=self.webpackChunkengineering_com||[]).push([[805],{805:(ot,V,D)=>{D.r(V),D.d(V,{default:()=>Y});var Z=D(861);const u="polystar",X=function(){var B=(0,Z.Z)(function*(x){let o;const k=x.configObj.pref("lang");try{o=yield function(s){switch(s){case"./locale/en.js":return Promise.resolve().then(function(){return $});case"./locale/fr.js":return Promise.resolve().then(function(){return tt});case"./locale/zh-CN.js":return Promise.resolve().then(function(){return et});default:return new Promise(function(G,m){("function"==typeof queueMicrotask?queueMicrotask:setTimeout)(m.bind(null,new Error("Unknown variable dynamic import: "+s)))})}}("./locale/".concat(k,".js"))}catch(j){console.warn("Missing translation (".concat(k,") for ").concat(u," - using 'en'")),o=yield Promise.resolve().then(function(){return $})}x.i18next.addResourceBundle(k,u,o.default)});return function(o){return B.apply(this,arguments)}}();var Y={name:u,init(){var B=this;return(0,Z.Z)(function*(){const x=B,{svgCanvas:o}=x,{ChangeElementCommand:k}=o.history,j=n=>{o.undoMgr.addCommandToHistory(n)},{$id:s,$click:G}=o;let m,H,t;yield X(x);const d=(n,l)=>{n?s("".concat(l,"_panel")).style.removeProperty("display"):s("".concat(l,"_panel")).style.display="none"},L=(n,l)=>{o.changeSelectedAttribute(n,l),o.call("changed",m)},K=n=>1/Math.tan(n),Q=n=>1/Math.cos(n);return{name:x.i18next.t("".concat(u,":name")),callback(){const n="".concat(u,":title"),l="".concat(u,":buttons.0.title"),i="".concat(u,":buttons.1.title"),a='\n            <se-flyingbutton id="tools_polygon" title="'.concat(n,'">\n              <se-button id="tool_star" title="').concat(l,'" src="star.svg">\n              </se-button>\n              <se-button id="tool_polygon" title="').concat(i,'" src="polygon.svg">\n              </se-button>\n            </se-flyingbutton>\n          ');o.insertChildAtIndex(s("tools_left"),a,10),G(s("tool_star"),()=>{this.leftPanel.updateLeftPanel("tool_star")&&(o.setMode("star"),d(!0,"star"),d(!1,"polygon"))}),G(s("tool_polygon"),()=>{this.leftPanel.updateLeftPanel("tool_polygon")&&(o.setMode("polygon"),d(!0,"polygon"),d(!1,"star"))});const _="".concat(u,":contextTools.0.label"),E="".concat(u,":contextTools.0.title"),S="".concat(u,":contextTools.1.label"),P="".concat(u,":contextTools.1.title"),v="".concat(u,":contextTools.2.label"),g="".concat(u,":contextTools.2.title"),p="".concat(u,":contextTools.3.label"),y="".concat(u,":contextTools.3.title"),M=document.createElement("template");M.innerHTML='\n          <div id="star_panel">\n            <se-spin-input id="starNumPoints" label="'.concat(_,'" min=1 step=1 value=5 title="').concat(E,'">\n            </se-spin-input>\n            <se-spin-input id="RadiusMultiplier" label="').concat(S,'" min=1 step=2.5 value=3 title="').concat(P,'">\n            </se-spin-input>\n            <se-spin-input id="radialShift" min=0 step=1 value=0 label="').concat(v,'" title="').concat(g,'">\n            </se-spin-input>\n          </div>\n          <div id="polygon_panel">\n            <se-spin-input size="3" id="polySides" min=1 step=1 value=5 label="').concat(p,'" title="').concat(y,'">\n            </se-spin-input>\n          </div>\n        '),s("tools_top").appendChild(M.content.cloneNode(!0)),d(!1,"star"),d(!1,"polygon"),s("starNumPoints").addEventListener("change",r=>{L("point",r.target.value);const c=r.target.value;let f=m.length;for(;f--;){const e=m[f];if(e.hasAttribute("r")){const U=e.getAttribute("point"),W=e.getAttribute("points"),F=e.getAttribute("radialshift");let w=0,C=0;if(e.points){const N=e.points,O=N.numberOfItems;for(let I=0;I<O;++I){const h=N.getItem(I);w+=parseFloat(h.x),C+=parseFloat(h.y)}const z=w/O,R=C/O,T=Number(e.getAttribute("r")),b=T/e.getAttribute("starRadiusMultiplier");let A="";for(let I=0;c>=I;I++){let h=2*Math.PI*(I/c);h-=Math.PI/2;let q=T*Math.cos(h)+z,J=T*Math.sin(h)+R;A+=q+","+J+" ",isNaN(b)||(h=2*Math.PI*(I/c)+Math.PI/c,h-=Math.PI/2,h+=F,q=b*Math.cos(h)+z,J=b*Math.sin(h)+R,A+=q+","+J+" ")}e.setAttribute("points",A),j(new k(e,{point:U,points:W}))}}}}),s("RadiusMultiplier").addEventListener("change",r=>{L("starRadiusMultiplier",r.target.value)}),s("radialShift").addEventListener("change",r=>{L("radialshift",r.target.value)}),s("polySides").addEventListener("change",r=>{L("sides",r.target.value);const c=r.target.value;let f=m.length;for(;f--;){const e=m[f];if(e.hasAttribute("edge")){const U=e.getAttribute("sides"),W=e.getAttribute("points");let F=0,w=0;if(e.points){const C=e.points,N=C.numberOfItems;for(let b=0;b<N;++b){const A=C.getItem(b);F+=parseFloat(A.x),w+=parseFloat(A.y)}const O=F/N,z=w/N,R=e.getAttribute("edge")/2*K(Math.PI/c)*Q(Math.PI/c);let T="";for(let b=0;c>=b;b++){const A=2*Math.PI*b/c;T+=R*Math.cos(A)+O+","+(R*Math.sin(A)+z)+" "}e.setAttribute("points",T),j(new k(e,{sides:U,points:W}))}}}})},mouseDown(n){if("star"===o.getMode()){const l=o.getColor("fill"),i=o.getColor("stroke"),a=o.getStrokeWidth();return H=!0,t=o.addSVGElementsFromJson({element:"polygon",attr:{cx:n.start_x,cy:n.start_y,id:o.getNextId(),shape:"star",point:s("starNumPoints").value,r:0,radialshift:s("radialShift").value,r2:0,orient:"point",fill:l,stroke:i,"stroke-width":a}}),{started:!0}}if("polygon"===o.getMode()){const l=o.getColor("fill"),i=o.getColor("stroke"),a=o.getStrokeWidth();return H=!0,t=o.addSVGElementsFromJson({element:"polygon",attr:{cx:n.start_x,cy:n.start_y,id:o.getNextId(),shape:"regularPoly",sides:s("polySides").value,orient:"x",edge:0,fill:l,stroke:i,"stroke-width":a}}),{started:!0}}},mouseMove(n){if(H){if("star"===o.getMode()){const l=Number(t.getAttribute("cx")),i=Number(t.getAttribute("cy")),a=Number(t.getAttribute("point")),_=t.getAttribute("orient"),E=t.getAttribute("fill"),S=t.getAttribute("stroke"),P=Number(t.getAttribute("stroke-width")),v=Number(t.getAttribute("radialshift"));let g=n.mouse_x,p=n.mouse_y;const y=Math.sqrt((g-l)*(g-l)+(p-i)*(p-i))/1.5,M=document.getElementById("RadiusMultiplier").value,r=y/M;t.setAttribute("r",y),t.setAttribute("r2",r),t.setAttribute("starRadiusMultiplier",M);let c="";for(let f=0;a>=f;f++){let e=2*Math.PI*(f/a);"point"===_?e-=Math.PI/2:"edge"===_&&(e=e+Math.PI/a-Math.PI/2),g=y*Math.cos(e)+l,p=y*Math.sin(e)+i,c+=g+","+p+" ",isNaN(r)||(e=2*Math.PI*(f/a)+Math.PI/a,"point"===_?e-=Math.PI/2:"edge"===_&&(e=e+Math.PI/a-Math.PI/2),e+=v,g=r*Math.cos(e)+l,p=r*Math.sin(e)+i,c+=g+","+p+" ")}return t.setAttribute("points",c),t.setAttribute("fill",E),t.setAttribute("stroke",S),t.setAttribute("stroke-width",P),t.getAttribute("shape"),{started:!0}}if("polygon"===o.getMode()){const l=Number(t.getAttribute("cx")),i=Number(t.getAttribute("cy")),a=Number(t.getAttribute("sides")),_=t.getAttribute("fill"),E=t.getAttribute("stroke"),S=Number(t.getAttribute("stroke-width"));let P=n.mouse_x,v=n.mouse_y;const g=Math.sqrt((P-l)*(P-l)+(v-i)*(v-i))/1.5;t.setAttribute("edge",g);const p=g/2*K(Math.PI/a)*Q(Math.PI/a);let y="";for(let M=0;a>=M;M++){const r=2*Math.PI*M/a;P=p*Math.cos(r)+l,v=p*Math.sin(r)+i,y+=P+","+v+" "}return t.setAttribute("points",y),t.setAttribute("fill",_),t.setAttribute("stroke",E),t.setAttribute("stroke-width",S),{started:!0}}}},mouseUp:()=>"star"===o.getMode()?{keep:"0"!==t.getAttribute("r"),element:t}:"polygon"===o.getMode()?{keep:"0"!==t.getAttribute("edge"),element:t}:void 0,selectedChanged(n){m=n.elems;let l=m.length;for(;l--;){const i=m[l];"star"===(null==i?void 0:i.getAttribute("shape"))?n.selectedElement&&!n.multiselected?(s("starNumPoints").value=i.getAttribute("point"),s("radialShift").value=i.getAttribute("radialshift"),d(!0,"star")):d(!1,"star"):"regularPoly"===(null==i?void 0:i.getAttribute("shape"))?n.selectedElement&&!n.multiselected?(s("polySides").value=i.getAttribute("sides"),d(!0,"polygon")):d(!1,"polygon"):(d(!1,"star"),d(!1,"polygon"))}}}})()}},$=Object.freeze({__proto__:null,default:{name:"star",title:"Polygone/Star Tool",buttons:[{title:"Star Tool"},{title:"Polygon Tool"}],contextTools:[{title:"Number of Sides",label:"points"},{title:"Pointiness",label:"Pointiness"},{title:"Twists the star",label:"Radial Shift"},{title:"Number of Sides",label:"sides"}]}}),tt=Object.freeze({__proto__:null,default:{name:"etoile",title:"Outil Polygone/Etoile",buttons:[{title:"Outil Etoile"},{title:"Outil Polygone"}],contextTools:[{title:"Nombre de c\xf4t\xe9s",label:"points"},{title:"Pr\xe9cision",label:"Pr\xe9cision"},{title:"Torsion Etoile",label:"D\xe9calage Radial"},{title:"Nombre de c\xf4t\xe9s",label:"c\xf4t\xe9s"}]}}),et=Object.freeze({__proto__:null,default:{name:"\u661f\u5f62",title:"Polygone/Star Tool",buttons:[{title:"\u661f\u5f62\u5de5\u5177"},{title:"\u591a\u8fb9\u5f62\u5de5\u5177"}],contextTools:[{title:"\u9876\u70b9",label:"\u9876\u70b9"},{title:"\u949d\u5ea6",label:"\u949d\u5ea6"},{title:"\u5f84\u5411",label:"\u5f84\u5411"},{title:"\u8fb9\u6570",label:"\u8fb9\u6570"}]}})}}]);